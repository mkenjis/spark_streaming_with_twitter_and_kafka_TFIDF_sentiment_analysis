
val tweets = spark.read.format("csv").option("sep",",").option("quoteAll","true").load("hdfs://spkm:9000/virgin-twitter/virgin-tweets-noheader.csv").rdd

val rdd1 = tweets.map( x => x.toSeq).map( x => x.toArray)

val categories = rdd1.map(x => x(1)).distinct.zipWithIndex.collect.toMap

val rdd2 = rdd1.map( x => Array(x(10).toString,x(1).toString))

// remove nonword characters (such as punctuation).
val nonWordSplit = rdd2.flatMap(x => x(0).split("""\W+""").map(_.toLowerCase))

// filter out numbers and tokens that are words mixed with numbers
val regex = """[^0-9]*""".r
val filterNumbers = nonWordSplit.filter(token => regex.pattern.matcher(token).matches)

// list highest occurrence of words to get an idea which stop words to be removed
val tokenCounts = filterNumbers.map(t => (t, 1)).reduceByKey(_ + _)
val orderingDesc = Ordering.by[(String, Int), Int](_._2)

// remove stop words
val stopwords = Set(
 "","the","a","an","of","or","in","for","by","on","but", "is", "not", "with", "as", "was", "if",
 "they", "are", "this", "and", "it", "have", "from", "at", "my", "be", "that", "to"
)
val tokenCountsFilteredStopwords = tokenCounts.filter { case(k, v) => !stopwords.contains(k) }

// remove tokens with one-character length
val tokenCountsFilteredSize = tokenCountsFilteredStopwords.filter { case (k, v) => k.size >= 2 }

// list terms with only one-occurrence
val orderingAsc = Ordering.by[(String, Int), Int](-_._2)

// remove terms with only one-occurrence
val rareTokens = tokenCounts.filter{ case (k, v) => v < 2 }.map{ case (k, v) => k }.collect.toSet
val tokenCountsFilteredAll = tokenCountsFilteredSize.filter { case (k, v) => !rareTokens.contains(k) }


def tokenize(line: String): Seq[String] = {
 line.split("""\W+""")
 .map(_.toLowerCase)
 .filter(token => regex.pattern.matcher(token).matches)
 .filterNot(token => stopwords.contains(token))
 .filterNot(token => rareTokens.contains(token))
 .filter(token => token.size >= 2)
 .toSeq
}


val sets = rdd2.randomSplit(Array(0.8,0.2))
val trainSet = sets(0)
val testSet = sets(1)

val tokens = trainSet.map(x => tokenize(x(0)))

-------------------

// import org.apache.spark.mllib.linalg.{ SparseVector => SV }
import org.apache.spark.mllib.feature.HashingTF
import org.apache.spark.mllib.feature.IDF

val dim = math.pow(2, 13).toInt
val hashingTF = new HashingTF(dim)

// transform function of HashingTF maps each input document (that is, a sequence of tokens) to an MLlib Sparse Vector.
val tf = hashingTF.transform(tokens)
tf.cache

val idf = new IDF().fit(tf)
val tfidf = idf.transform(tf)

--------------------

import org.apache.spark.mllib.regression.LabeledPoint

val zippedTrain = trainSet.zip(tfidf)
val train = zippedTrain.map{ case(text,vector) => LabeledPoint(categories(text(1)),vector) }
train.cache

import org.apache.spark.mllib.classification.{LogisticRegressionModel, LogisticRegressionWithLBFGS}
val numIterations = 100
val model = new LogisticRegressionWithLBFGS().setNumClasses(3).run(train)

----------------------

import org.apache.spark._
import org.apache.spark.streaming._
import org.apache.spark.streaming.twitter._
import twitter4j.Status
import twitter4j.auth.OAuthAuthorization
import twitter4j.conf.ConfigurationBuilder

val builder = new ConfigurationBuilder()
builder.setDebugEnabled(true)
builder.setOAuthConsumerKey("PCx45utcQw1DjUtz7wDh2LSCY")
builder.setOAuthConsumerSecret("BihPBN11zcRuxNQXRxT5bBLlHhPCP2TTld7soqkv6R2v0koNh6")
builder.setOAuthAccessToken("39749612-mkEB2qh7ao9BgiffFXwuGfpyiulrtE031wO5oBX2y")
builder.setOAuthAccessTokenSecret("Z1jiSVMMExJ3XWqWvYChnOTHihm4jRNx35JhObW7xvnpg")

val auth = new OAuthAuthorization(builder.build)

val filters = Array("VirginAmerica", "airlines")

val ssc = new StreamingContext(sc,Seconds(10))
val twitterStream = TwitterUtils.createStream(ssc, Some(auth), filters )

val tweets = twitterStream.filter(tweet => tweet.getLang.equals("en") || tweet.getLang.equals("")).map(_.getText()).map(_.replaceAll("/[^A-Za-z0-9 ]/", "")).map(_.replaceAll("/", "")).map(_.replaceAll("RT.+?(?=\\s)\\s", "")).map(_.replaceAll("https([^\\s]+).*", ""))

import kfkProducerWrapper.KafkaProducerWrapper


tweets.foreachRDD( rdd  => {

  val brareTokens = rareTokens
  val regex = """[^0-9]*""".r
  val stopwords = Set(
 "","the","a","an","of","or","in","for","by","on","but", "is", "not", "with", "as", "was", "if",
 "they", "are", "this", "and", "it", "have", "from", "at", "my", "be", "that", "to"
)
  def tokenize(line: String): Seq[String] = {
   line.split("""\W+""")
   .map(_.toLowerCase)
   .filter(token => regex.pattern.matcher(token).matches)
   .filterNot(token => stopwords.contains(token))
   .filterNot(token => brareTokens.contains(token))
   .filter(token => token.size >= 2)
   .toSeq
  }
  
  val revCategories = for ((k,v) <- categories) yield (v.toDouble, k.toString)
  val HashTF = hashingTF
  val IDFModel = idf
  val lrmodel = model
  
  val testSet = rdd.map(x => Array(x, "key"))
  val testtokens = testSet.map(x => tokenize(x(0)))
  val testTf = HashTF.transform(testtokens)
  val testTfIdf = IDFModel.transform(testTf)
  val zippedTest = testSet.zip(testTfIdf)
  zippedTest.foreachPartition( iter  => {
    KafkaProducerWrapper.brokerList = "ubkafka:9092"
    val producer = KafkaProducerWrapper.instance
    val validPredicts = iter.map{ case(text,vector) => (lrmodel.predict(vector),text) }
    validPredicts.foreach({ x => producer.send("metric", revCategories(x._1), x._2(0)) })
  })
})
 
sc.setCheckpointDir("/home/hadoop/checkpoint")

ssc.start()
